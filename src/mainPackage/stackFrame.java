/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package mainPackage;

import javax.swing.JOptionPane;
import static mainPackage.insertArray.newNums;
import java.util.Arrays;
/**
 *
 * @author soria
 */
public class stackFrame extends javax.swing.JFrame {

    /**
     * Creates new form stackFrame
     */
    public stackFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        popBut = new javax.swing.JButton();
        pushVal = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        popVal = new javax.swing.JTextField();
        pushBut = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        peekVal = new javax.swing.JTextField();
        insBut2 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        displayArea = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        size = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        limitVal = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(359, 470));
        setResizable(false);

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel3.setText("STACK");

        popBut.setBackground(new java.awt.Color(0, 204, 51));
        popBut.setText("Pop");
        popBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popButActionPerformed(evt);
            }
        });

        pushVal.setColumns(5);
        pushVal.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        pushVal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pushValActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("Value to Push");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Popped Value");

        popVal.setEditable(false);
        popVal.setColumns(5);
        popVal.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        popVal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popValActionPerformed(evt);
            }
        });

        pushBut.setBackground(new java.awt.Color(0, 204, 51));
        pushBut.setText("Push");
        pushBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pushButActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Peek");

        peekVal.setEditable(false);
        peekVal.setColumns(5);
        peekVal.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        peekVal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                peekValActionPerformed(evt);
            }
        });

        insBut2.setBackground(new java.awt.Color(0, 204, 51));
        insBut2.setText("Peek");
        insBut2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insBut2ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(0, 204, 51));
        jButton2.setText("Display");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        displayArea.setEditable(false);
        displayArea.setColumns(20);
        displayArea.setRows(5);
        jScrollPane1.setViewportView(displayArea);

        jLabel5.setText("Stack Size = ");


        jLabel6.setText("Limit Size =");

        limitVal.setText(String.valueOf(limiter));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(132, 132, 132)
                .addComponent(jLabel3)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(81, 81, 81)
                                .addComponent(jButton2))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel2)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(pushVal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGap(6, 6, 6)
                                                        .addComponent(pushBut))
                                                    .addComponent(jLabel1))
                                                .addGap(58, 58, 58)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(popVal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGap(6, 6, 6)
                                                        .addComponent(popBut)))))
                                        .addGap(19, 19, 19))
                                    .addComponent(jLabel6))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(limitVal))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(size)
                        .addGap(43, 43, 43)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(insBut2))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(peekVal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addGap(21, 21, 21))))))
                .addContainerGap(47, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addGap(14, 14, 14)
                .addComponent(jLabel3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(pushVal, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pushBut))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(popVal, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(popBut)))
                .addGap(22, 22, 22)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(peekVal, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(insBut2)
                    .addComponent(jLabel5)
                    .addComponent(size)
                    .addComponent(jLabel6)
                    .addComponent(limitVal))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addContainerGap(30, Short.MAX_VALUE))
        );
        // if (!withLimit2 && !AbsDaTps.queueFrame) {
        //     size.setText(String.valueOf(limiter2));
        // } else if (!withLimit2 && AbsDaTps.queueFrame){
        //     size.setText(String.valueOf(limiter2));
        // } else if (withLimit2 && !AbsDaTps.queueFrame) {
        //     size.setText(String.valueOf(limiter));
        // } else if (withLimit2 && AbsDaTps.queueFrame) {
        //     size.setText(String.valueOf(limiter));
        // }
        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        AbsDaTps backToMn = new AbsDaTps();
        backToMn.setVisible(true);
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void popButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popButActionPerformed
        // TODO add your handling code here:
        if (wdLimit != 0) {
            newNums = new int[wdLimit];
            newNums = createArray.numbers;
            popMethod();
        } else {
            wdLimit = createArray.numesLen;
            newNums = new int[wdLimit];
            newNums = createArray.numbers;
            popMethod();
        }
        
//        if (limitOrNo.withLimit) {
//            popWithLimit();
//        } else {
//            popMethod();
//        }
       
    }//GEN-LAST:event_popButActionPerformed

    private void pushValActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pushValActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pushValActionPerformed

    private void pushButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pushButActionPerformed
        // TODO add your handling code here:
        if (limitOrNo.withLimit) {
            if (pushCount != 1) {
                newNums = new int[createArray.numbers.length + 1];
                System.arraycopy(createArray.numbers, 0, newNums, 0, createArray.numbers.length);
                pushCount++;
                check();
                if (isNull) {
                    sizeAdd = 0;
                    size.setText(String.valueOf(sizeAdd));
                } else {
                    sizeAdd = createArray.numbers.length;
                    size.setText(String.valueOf(sizeAdd));
                }
                pushMethodLimit();
            } else {
                newNums = new int[createArray.numbers.length + 1];
                System.arraycopy(createArray.numbers, 0, newNums, 0, createArray.numesLen);
                pushMethodLimit();
            }
        } else {
            if (pushCount != 1) {
                pushCount++;

                newNums = new int[createArray.numesLen + 1];
                System.arraycopy(createArray.numbers, 0, newNums, 0, createArray.numesLen);
                check();
                if (isNull) {
                    sizeAdd = 0;
                    size.setText(String.valueOf(sizeAdd));
                } else {
                    sizeAdd = createArray.numbers.length;
                    size.setText(String.valueOf(sizeAdd));
                }
                pushMethodLimit();
            } else {
                newNums = new int[createArray.numesLen + 1];
                System.arraycopy(createArray.numbers, 0, newNums, 0, createArray.numesLen);
                pushMethodLimit();
            }
        }
        
    }//GEN-LAST:event_pushButActionPerformed

    private void popValActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popValActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_popValActionPerformed

    private void peekValActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_peekValActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_peekValActionPerformed

    private void insBut2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insBut2ActionPerformed
        // TODO add your handling code here:
        System.out.println(isNull);

        peekMethod();
    }//GEN-LAST:event_insBut2ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        // newNums = new int[createArray.numesLen];
        // System.arraycopy(createArray.numbers, 0, newNums, 0, createArray.numesLen);
        
        displayMethod();
    }//GEN-LAST:event_jButton2ActionPerformed
    
    private void check() {
        for (int i = 0; i < createArray.numbers.length; i++) {
            if (createArray.numbers[i] == 0) {
                isNull = true;
            } else {
                isNull = false;
            }
        }
    }
    
    private void displayMethod() {
        if (createArray.numesLen == 0) {
            JOptionPane.showMessageDialog(this, "Stack is empty!");
            displayArea.setText("");
        } else {
//            newNums = createArray.numbers;
            StringBuilder sb = new StringBuilder();
            sb.append("[ ");
            for (int num : createArray.numbers) {
                if (num != 0) {
                    sb.append(num).append(" "); // Append non-zero values
                }
            }
            sb.append(" ]");
            displayArea.setText(sb.toString());
        }
    }
    
    private int[] pushMethodLimit() {
        System.out.println(createArray.numesLen);
        try {
            System.out.println("current index push " + index);
            
            if (isNull && limitOrNo.withLimit) {
                if (counter2 < createArray.numesLen) {
                    int valToPsh = Integer.parseInt(pushVal.getText());
                    newNums[counter2] = valToPsh;
//                    index++;
//                    count++;
                    counter2++;
                    peekNull++;
                    createArray.numbers = newNums;
//                       createArray.numesLen = createArray.numbers.length;
                    // sizeNull++;
                    sizeAdd++;
                    count++;
                    countNull++;
                    isNull = true;
                    JOptionPane.showMessageDialog(this, valToPsh + " is pushed to the stack!");
                    size.setText(String.valueOf(sizeAdd));
                    System.out.println("\n\nlength is: " + newNums.length);
                } else {
                    JOptionPane.showMessageDialog(this," Stack is full!"); 
                }
            } else if (isNull && !limitOrNo.withLimit) {
                System.out.println("isNull true & withLimit false");
                int valToPsh = Integer.parseInt(pushVal.getText());
                newNums[counter2] = valToPsh;
                counter2++;
                peekNull++;
                countNull++;
                count++;
                createArray.numesLen++;
                createArray.numbers = newNums;
                sizeAdd++;
                JOptionPane.showMessageDialog(this, valToPsh + " is pushed to the stack!");
                size.setText(String.valueOf(sizeAdd));
            } else if(!isNull && limitOrNo.withLimit) {
                if (count != Integer.parseInt(limiter)) {
                    int valToPsh = Integer.parseInt(pushVal.getText());
                    
                    newNums[index] = valToPsh;
                    count++;
                    peek3++;
                    
                    System.arraycopy(newNums, 0, createArray.numbers, 0, index);
                    
                    createArray.numbers = newNums;
//                       createArray.numesLen = createArray.numbers.length;
                    sizeAdd++;
                    notNullCount++;
                    JOptionPane.showMessageDialog(this, valToPsh + " is pushed to the stack!"); 
                    size.setText(String.valueOf(sizeAdd));
                    System.out.println("\n\nCount is: " + count);
                } else {
                    JOptionPane.showMessageDialog(this," Stack is full!");   
                }
            } else if (!isNull && !limitOrNo.withLimit) {
                int valToPsh = Integer.parseInt(pushVal.getText());
                newNums[index2] = valToPsh;
                index2++;
                count2++;
                peek2++;
                countNull++;
                createArray.numesLen++;
                createArray.numbers = newNums;
                System.arraycopy(newNums, 0, createArray.numbers, 0, index);
//                       createArray.numesLen = createArray.numbers.length;
                sizeAdd++;
                JOptionPane.showMessageDialog(this, valToPsh + " is pushed to the stack!"); 
                size.setText(String.valueOf(sizeAdd));
            }
//            if (limitOrNo.withLimit) {
//                if (count != limiter) {
//                    int valToPsh = Integer.parseInt(pushVal.getText());
//                    newNums[index] = valToPsh;
//                    index++;
//                    count++;
//                    peekNull++;
//                    createArray.numbers = newNums;
////                       createArray.numesLen = createArray.numbers.length;
//                    sizeAdd++;
//                    JOptionPane.showMessageDialog(this, valToPsh + " is pushed to the stack!");   
//                } else {
//                    JOptionPane.showMessageDialog(this," Stack is full!");   
//                }
//            } else {
//                int valToPsh = Integer.parseInt(pushVal.getText());
//
//                insertArray.newNums[createArray.numesLen] = valToPsh;
//                createArray.numesLen++;
//                createArray.numbers = newNums;
//                createArray.numesLen = createArray.numbers.length;
//                peek2++;
//                sizeAdd++;
//                JOptionPane.showMessageDialog(this, valToPsh + " is pushed to the stack!");
//            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Enter a number!");
        }
//            } catch (ArrayIndexOutOfBoundsException e) {
//                JOptionPane.showMessageDialog(this, "Stack !");
//            }

        for (int i=0;i<createArray.numbers.length;i++){
                    System.out.print(createArray.numbers[i]);
                }
        System.arraycopy(newNums, 0, createArray.numbers, 0, createArray.numbers.length);
        System.out.println("current peek null " + peekNull);
        return createArray.numbers;
    }
    
    private int[] popMethod() {
//        if (createArray.numesLen == 0){
//            JOptionPane.showMessageDialog(this, "Stack is empty!");
//            popVal.setText("");
//        } else {
            try {
                if (isNull && limitOrNo.withLimit) {
                    System.out.println("isNull is " + isNull + " " + "withLimit is " +limitOrNo.withLimit);
                    if (countNull != 0) {
                        popVal.setText(String.valueOf(newNums[countNull - 1]));
                        JOptionPane.showMessageDialog(this, newNums[countNull - 1] + " is popped from stack!");
                        // Remove the line below
                        newNums[countNull - 1] = 0;
                        countNull--;
                        System.arraycopy(newNums, 0, createArray.numbers, 0, countNull);
                        peek--;
                        count--;
                        counter2--;
                        peek2--;
                        sizeAdd--;
                        peekNull--;
                        sizeNull--;
                        System.out.println("\n\nlength is: " + newNums.length);
                    } else {
                        JOptionPane.showMessageDialog(this, "Stack is empty!");
                        popVal.setText("");
                    }
                } else if (isNull && !limitOrNo.withLimit) {
                    System.out.println("isNull is " + isNull + " " + "withLimit is " +limitOrNo.withLimit);
                    if (countNull != 0) {
                        popVal.setText(String.valueOf(newNums[countNull - 1]));
                        JOptionPane.showMessageDialog(this, newNums[countNull - 1] + " is popped from stack!");
                        // Remove the line below
                        newNums[countNull - 1] = 0;
                        countNull--;
                        System.arraycopy(newNums, 0, createArray.numbers, 0, countNull);
                        peek--;
                        count--;
                        counter2--;
                        peek2--;
                        sizeAdd--;
                        peekNull--;
                        sizeNull--;
                    } else {
                        JOptionPane.showMessageDialog(this, "Stack is empty!");
                        popVal.setText("");
                    }
                } else if (!isNull && limitOrNo.withLimit) {
                    if (notNullCount != 0) {
                        popVal.setText(String.valueOf(newNums[notNullCount - 1]));
                        JOptionPane.showMessageDialog(this, newNums[notNullCount -1] + " is popped from stack!");
                        newNums[notNullCount - 1] = 0;
                        notNullCount--;
                       
                        count--;
                        peek3--;
                        createArray.numbers = newNums;
                        System.arraycopy(newNums, 0, createArray.numbers, 0, index);
                        index--;
                        sizeAdd--;
                        size.setText(String.valueOf(sizeAdd));
                        System.out.println("\n\npeek3 is: " + peek3);
                    } else {
                        JOptionPane.showMessageDialog(this, "Stack is empty!");
                        popVal.setText("");
                        index = createArray.numbers.length;
                        notNullCount = createArray.numbers.length;
                        count = 0; 
                        peek3 = createArray.numbers.length - 1;
                    }
                     
                } else if (!isNull && !limitOrNo.withLimit) {
                    System.out.println("isNull is " + isNull + " " + "withLimit is " +limitOrNo.withLimit);
                    if (count2 != 0) {
                        popVal.setText(String.valueOf(newNums[count2 - 1]));
                        JOptionPane.showMessageDialog(this, newNums[count2 - 1] + " is popped from stack!");

                        // Remove the line below
                        newNums[count2 - 1] = 0;
                        // System.arraycopy(newNums, 0, createArray.numbers, 0, wdLimit);
                        createArray.numbers = newNums;
                        peek--;
                        count2--;
                        countNull--;
                        peek2--;
                        index2--;
                        sizeAdd--;
                    } else {
                        JOptionPane.showMessageDialog(this, "Stack is empty!");
                        sizeAdd--;
                        popVal.setText("");
                    }
                }
                
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Enter a number!");
            }
        
        
        size.setText(String.valueOf(sizeAdd));
        return createArray.numbers;
    }
    
    // private int[] popWithLimit() {
    //     popVal.setText(String.valueOf(newNums[newNums.length - 1]));
    //     JOptionPane.showMessageDialog(this, newNums[newNums.length - 1] + " is popped from stack!");

    //     // Remove the last element from newNums array
    //     int[] newArray = Arrays.copyOf(newNums, newNums.length - 1);

    //     // Update createArray.numbers with newArray
    //     createArray.numbers = newArray;

    //     // Update relevant variables
    //     wdLimit--;
    //     peek--;
    //     count--;
    //     peek2--;
    //     size.setText(String.valueOf(createArray.numesLen));

    //     return createArray.numbers;
    // }

    private void peekMethod() {
        System.out.println(isNull + "   " + limitOrNo.withLimit);
            try {
                if (isNull && limitOrNo.withLimit) {
                        if (countNull != 0) {
                            int peekVals = newNums[peekNull - 1];
                            peekVal.setText(String.valueOf(peekVals));
                            JOptionPane.showMessageDialog(this, peekVals + " is at the top of the stack!");
                        } else {
                            JOptionPane.showMessageDialog(this, "Stack is empty!");
                            peekVal.setText("");
                        }
                } else if (isNull && !limitOrNo.withLimit) {
                    if (countNull != 0) {
                        int peekVals = newNums[peekNull - 1];
                        peekVal.setText(String.valueOf(peekVals));
                        JOptionPane.showMessageDialog(this, peekVals + " is at the top of the stack!");
                    } else {
                        JOptionPane.showMessageDialog(this, "Stack is empty!");
                        peekVal.setText("");
                    }
                } else if (!isNull && limitOrNo.withLimit) {
                    if (notNullCount != 0) {
                        int peekVals = newNums[peek3];
                        peekVal.setText(String.valueOf(peekVals));
                        JOptionPane.showMessageDialog(this, peekVals + " is at the top of the stack!");
                    } else {
                        JOptionPane.showMessageDialog(this, "Stack is empty!");
                        peekVal.setText("");
                    }
                } else if (!isNull && !limitOrNo.withLimit) {
                    if (count2 != 0) {
                        int peekVals = createArray.numbers[peek2];
                        peekVal.setText(String.valueOf(peekVals));
                        JOptionPane.showMessageDialog(this, peekVals + " is at the top of the stack!");
                        System.out.println("peek2 is " + peek2);
                    } else {
                        JOptionPane.showMessageDialog(this, "Stack is empty!");
                        peekVal.setText("");
                    }
                }
//                else if (!isNull && limitOrNo.withLimit) {
//                    int peekVals = createArray.numbers[peek2];
//                    peekVal.setText(String.valueOf(peekVals));
//                    JOptionPane.showMessageDialog(this, peekVals + " is at the top of the stack!");
//                } 
                else {
                    if (countNull != 0) {
                        int peekVals = createArray.numbers[peek2];
                        peekVal.setText(String.valueOf(peekVals));
                        JOptionPane.showMessageDialog(this, peekVals + " is at the top of the stack!");
                    } else {
                        JOptionPane.showMessageDialog(this, "Stack is empty!");
                        peekVal.setText("");
                    }
                }  
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Enter a number!");
            }
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(stackFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(stackFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(stackFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(stackFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new stackFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea displayArea;
    private javax.swing.JButton insBut2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JLabel limitVal;
    private javax.swing.JTextField peekVal;
    private javax.swing.JButton popBut;
    private javax.swing.JTextField popVal;
    private javax.swing.JButton pushBut;
    private javax.swing.JTextField pushVal;
    private javax.swing.JLabel size;
    // End of variables declaration//GEN-END:variables
    public static int peek = createArray.numbers.length -1;
    public static int peekNull = 0;
    public static int peek2 = createArray.numbers.length - 1;
    public static int peek3 = createArray.numbers.length - 1;
    public static int count = createArray.numbers.length;
    public static int countNull = 0;
    public static int index = createArray.numbers.length;
    public static int wdLimit = createArray.numesLen;
    public static String limiter;
    public static int sizeAdd;
    public static int sizeNull = 0;
    public static boolean isNull;
//    private static int counter1 = createArray.numbers.length;
    public static int counter2 = 0;
    public static int pushCount = 0;
    public static int notNullCount = createArray.numbers.length;
    public static int limiter2;
    public static boolean withLimit2;
    public static int index2 = createArray.numbers.length;
    public static int count2 = createArray.numbers.length;
}
