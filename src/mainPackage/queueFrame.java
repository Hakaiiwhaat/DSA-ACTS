/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package mainPackage;
import javax.swing.JOptionPane;
import static mainPackage.insertArray.newNums;
/**
 *
 * @author soria
 */
public class queueFrame extends javax.swing.JFrame {

    /**
     * Creates new form queueFrame
     */
    public queueFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        queueBut = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        peekVal = new javax.swing.JTextField();
        insBut2 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        displayArea = new javax.swing.JTextArea();
        deqBut = new javax.swing.JButton();
        queueVal = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        size2 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        deqVal = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        limitVal2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(359, 470));
        setResizable(false);

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        queueBut.setBackground(new java.awt.Color(0, 204, 51));
        queueBut.setText("Enqueue");
        queueBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queueButActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Peek");

        peekVal.setEditable(false);
        peekVal.setColumns(5);
        peekVal.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        peekVal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                peekValActionPerformed(evt);
            }
        });

        insBut2.setBackground(new java.awt.Color(0, 204, 51));
        insBut2.setText("Peek");
        insBut2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insBut2ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(0, 204, 51));
        jButton2.setText("Display");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel3.setText("QUEUE");

        displayArea.setEditable(false);
        displayArea.setColumns(20);
        displayArea.setRows(5);
        jScrollPane1.setViewportView(displayArea);

        deqBut.setBackground(new java.awt.Color(0, 204, 51));
        deqBut.setText("Dequeue");
        deqBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deqButActionPerformed(evt);
            }
        });

        queueVal.setColumns(5);
        queueVal.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        queueVal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queueValActionPerformed(evt);
            }
        });

        jLabel5.setText("Queue Size = ");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("Value to Enqueue");


        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Value Dequeued");

        deqVal.setEditable(false);
        deqVal.setColumns(5);
        deqVal.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        deqVal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deqValActionPerformed(evt);
            }
        });

        jLabel6.setText("Queue Limit = ");

        

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(140, 140, 140)
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(size2)
                                .addGap(35, 35, 35)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(peekVal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel4)
                                            .addGap(21, 21, 21)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(insBut2)
                                        .addGap(27, 27, 27)
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(limitVal2))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(109, 109, 109)
                                .addComponent(jLabel3)))))
                .addGap(0, 24, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(queueVal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(queueBut))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(deqVal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(deqBut)))
                .addGap(66, 66, 66))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addGap(8, 8, 8)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deqVal, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(queueVal, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deqBut)
                    .addComponent(queueBut))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(peekVal, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(insBut2)
                    .addComponent(jLabel5)
                    .addComponent(size2)
                    .addComponent(jLabel6)
                    .addComponent(limitVal2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addGap(37, 37, 37))
        );
        limitVal2.setText(limiter);
        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        AbsDaTps backToMn = new AbsDaTps();
        backToMn.setVisible(true);
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void queueButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queueButActionPerformed
        // TODO add your handling code here:
        if (limitOrNo.withLimit) {
            if (pushCount != 1) {
                check();
                pushCount++;
                if (isNull) {
                    initialSize = 0;
                    size2.setText(String.valueOf(initialSize));
                } else {
                    initialSize = createArray.numbers.length;
                    size2.setText(String.valueOf(initialSize));
                }
            }
            enqueueArray();
        } else {
            if (pushCount != 1) {
                pushCount++;
                newNums = new int[createArray.numesLen + 1];
                System.arraycopy(createArray.numbers, 0, newNums, 0, createArray.numesLen);
                check();
                if (isNull) {
                    initialSize = 0;
                    size2.setText(String.valueOf(initialSize));
                } else {
                    initialSize = createArray.numbers.length;
                    size2.setText(String.valueOf(initialSize));
                }
                enqueueArray();
            } else {
                newNums = new int[createArray.numesLen + 1];
                System.arraycopy(createArray.numbers, 0, newNums, 0, createArray.numesLen);
                enqueueArray();
            }
            
        }

    }//GEN-LAST:event_queueButActionPerformed

    private void peekValActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_peekValActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_peekValActionPerformed

    private void insBut2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insBut2ActionPerformed
        // TODO add your handling code here:
        peekMethod();
    }//GEN-LAST:event_insBut2ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
//        newNums = new int[createArray.numesLen];
//        System.arraycopy(createArray.numbers, 0, newNums, 0, createArray.numbers.length);

        displayMethod();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void deqButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deqButActionPerformed
        // TODO add your handling code here:
        newNums = new int[createArray.numesLen];
        System.arraycopy(createArray.numbers, 0, newNums, 0, createArray.numesLen);
        //        if (limitOrNo.withLimit) {
            //            popWithLimit();
            //        } else {
            //            popMethod();
            //        }
        dequeueMethod();
    }//GEN-LAST:event_deqButActionPerformed

    private void queueValActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queueValActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_queueValActionPerformed

    private void deqValActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deqValActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_deqValActionPerformed

    private void check() {
        for (int i = 0; i < createArray.numbers.length; i++) {
            if (createArray.numbers[i] != 0) {
                isNull = false;
            } else {
                isNull = true;
            }
        }
    }
    
    private int[] enqueueNoLimit() {
        try {
            if (isNull && limitOrNo.withLimit) {
                if (initialSize < createArray.numbers.length) {
                    int valToPsh = Integer.parseInt(queueVal.getText());
                
                    newNums[initialSize] = valToPsh;
                    // createArray.numesLen++;
                    createArray.numbers = newNums;
                    createArray.numesLen = createArray.numbers.length;
                    JOptionPane.showMessageDialog(this, "Value " + valToPsh + " enqueued!");
                }
            } else if (isNull && !limitOrNo.withLimit) {
                int valToPsh = Integer.parseInt(queueVal.getText());

                newNums[initialSize] = valToPsh;
                createArray.numbers = newNums;
                createArray.numesLen = createArray.numbers.length;
                JOptionPane.showMessageDialog(this, "Value " + valToPsh + " enqueued!");
            } else {
                 int valToPsh = Integer.parseInt(queueVal.getText());
                newNums[createArray.numesLen] = valToPsh;
                createArray.numesLen++;
                createArray.numbers = newNums;
                createArray.numesLen = createArray.numbers.length;
                JOptionPane.showMessageDialog(this, "Value " + valToPsh + " enqueued!");
            }
           
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Enter a number!");
        }
        size2.setText(String.valueOf(createArray.numesLen));
        return createArray.numbers;
    }
    
    private int[] enqueueArray() {
        try {
            if (isNull && limitOrNo.withLimit) {
                if (counter2 < createArray.numesLen) {
                    newNums[counter2] = Integer.parseInt(queueVal.getText());
                    counter2++;
                    deqCounter++;
                    initialSize++;
                    createArray.numbers = newNums;
                    JOptionPane.showMessageDialog(this, "Value " + queueVal.getText() + " enqueued!");
                } else {
                    JOptionPane.showMessageDialog(this, "Queue is full!");
                }
            } else if (isNull && !limitOrNo.withLimit) {
                int valToPsh = Integer.parseInt(queueVal.getText());
                deqCounter++;
                newNums[initialSize] = valToPsh;
                initialSize++;
                createArray.numesLen++;
                createArray.numbers = newNums;
                // createArray.numesLen = createArray.numbers.length;
                JOptionPane.showMessageDialog(this, "Value " + valToPsh + " enqueued!");
            } else {
                if (counter2 < createArray.numesLen) {
                    int valToPsh = Integer.parseInt(queueVal.getText());
                    newNums[createArray.numesLen] = valToPsh;
                    createArray.numesLen++;
                    deqCounter++;
                    createArray.numbers = newNums;
                    createArray.numesLen = createArray.numbers.length;
                    JOptionPane.showMessageDialog(this, "Value " + valToPsh + " enqueued!");
                } else {
                    JOptionPane.showMessageDialog(this, "Queue is full!");
                }
                
            }

            // if (isNull) {
            //     if (counter2 < createArray.numesLen) {
            //     newNums[counter2] = Integer.parseInt(queueVal.getText());
            //     counter2++;
            //     deqCounter++;
            //     initialSize++;
            //     createArray.numbers = newNums;
            //     JOptionPane.showMessageDialog(this, "Value " + queueVal.getText() + " enqueued!");
            //     } else {
            //         JOptionPane.showMessageDialog(this, "Queue is full!");
            //     }
            // } else {
            //     if (counter1 < createArray.numesLen) {
            //         newNums[counter1] = Integer.parseInt(queueVal.getText());
            //         counter1++;
            //         createArray.numbers = newNums;
            //         initialSize++;
            //         JOptionPane.showMessageDialog(this, "Value " + queueVal.getText() + " enqueued!");
            //     } else {
            //         JOptionPane.showMessageDialog(this, "Queue is full!");
            //     }
            // }
            
        }  catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Enter a number!");
        } 
        // catch (ArrayIndexOutOfBoundsException e) {
        //     JOptionPane.showMessageDialog(this, "Stack !");
        // }
        size2.setText(String.valueOf(initialSize));
        return createArray.numbers;
    }
    
    
    private int[] dequeueMethod() {
        if (deqCounter == 0) {
            JOptionPane.showMessageDialog(this, "Queue is empty!");
            deqVal.setText("");
        } else {
            deqVal.setText(String.valueOf(newNums[constantIndex]));
            JOptionPane.showMessageDialog(this, "Value " + deqVal.getText() + " dequeued!");
            // Shift elements to the left by one position
            for (int i = 0; i < newNums.length - 1; i++) {
                newNums[i] = newNums[i + 1];
            }
            newNums[newNums.length - 1] = 0; // Set the last element to 0 (optional)
            createArray.numbers = newNums;
            counter2--;
            deqCounter--;
            initialSize--;
        }
        size2.setText(String.valueOf(initialSize));
        return createArray.numbers;
    }
    
    private void peekMethod() {
        if (deqCounter == 0) {
            JOptionPane.showMessageDialog(this, "Queue is empty!");
            peekVal.setText("");
        } else {
            int frontVal = createArray.numbers[0];
            peekVal.setText(String.valueOf(frontVal));
            JOptionPane.showMessageDialog(this, "Value " + peekVal.getText() + " is at the front of the queue!");
        }
    }
    
    private void displayMethod() {
        if (createArray.numesLen == 0) {
            JOptionPane.showMessageDialog(this, "Array is not initialized.");
        } else {
            StringBuilder sb = new StringBuilder();
            sb.append("[ ");
            for (int num : createArray.numbers) {
                if (num != 0) {
                    sb.append(num).append(" "); // Append non-zero values
                }
            }
            sb.append(" ]");
            displayArea.setText(sb.toString());
        }
    }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(queueFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(queueFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(queueFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(queueFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new queueFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deqBut;
    private javax.swing.JTextField deqVal;
    private javax.swing.JTextArea displayArea;
    private javax.swing.JButton insBut2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel limitVal2;
    private javax.swing.JTextField peekVal;
    private javax.swing.JButton queueBut;
    private javax.swing.JTextField queueVal;
    private javax.swing.JLabel size2;
    // End of variables declaration//GEN-END:variables
//    public static int rear = -1;
    private static int counter1 = createArray.numbers.length;
    private static int counter2 = 0;
    private static boolean isNull = false;
    public static int constantIndex = 0;
    public static int deqCounter = 0;
    public static int initialSize;
    public static String limiter;
    private int pushCount = 0;
}
