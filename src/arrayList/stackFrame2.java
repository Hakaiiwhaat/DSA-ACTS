package arrayList;
import java.util.ArrayList;
import static arrayList.insertArray.newNums;
import javax.swing.JOptionPane;
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author soria
 */
public class stackFrame2 extends javax.swing.JFrame {

    /**
     * Creates new form stackFrame2
     */
    public stackFrame2() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        size = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        popVal = new javax.swing.JTextField();
        pushBut = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        peekVal = new javax.swing.JTextField();
        insBut2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        displayArea = new javax.swing.JTextArea();
        popBut = new javax.swing.JButton();
        pushVal = new javax.swing.JTextField();
        limitVal = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(359, 470));
        setResizable(false);

        jLabel5.setText("Stack Size = ");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("Value to Push");

        size.setText("0");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Popped Value");

        jLabel6.setText("Limit Size =");

        popVal.setEditable(false);
        popVal.setColumns(5);
        popVal.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        popVal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popValActionPerformed(evt);
            }
        });

        pushBut.setBackground(new java.awt.Color(0, 204, 51));
        pushBut.setText("Push");
        pushBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pushButActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Peek");

        peekVal.setEditable(false);
        peekVal.setColumns(5);
        peekVal.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        peekVal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                peekValActionPerformed(evt);
            }
        });

        insBut2.setBackground(new java.awt.Color(0, 204, 51));
        insBut2.setText("Peek");
        insBut2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insBut2ActionPerformed(evt);
            }
        });

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(0, 204, 51));
        jButton2.setText("Display");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel3.setText("STACK");

        displayArea.setEditable(false);
        displayArea.setColumns(20);
        displayArea.setRows(5);
        jScrollPane1.setViewportView(displayArea);

        popBut.setBackground(new java.awt.Color(0, 204, 51));
        popBut.setText("Pop");
        popBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popButActionPerformed(evt);
            }
        });

        pushVal.setColumns(5);
        pushVal.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        pushVal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pushValActionPerformed(evt);
            }
        });

        limitVal.setText("0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(126, 126, 126)
                        .addComponent(jLabel3))
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(81, 81, 81)
                                .addComponent(jButton2))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel2)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(pushVal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGap(6, 6, 6)
                                                        .addComponent(pushBut))
                                                    .addComponent(jLabel1))
                                                .addGap(58, 58, 58)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(popVal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGap(6, 6, 6)
                                                        .addComponent(popBut)))))
                                        .addGap(19, 19, 19))
                                    .addComponent(jLabel6))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(limitVal))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(size)
                        .addGap(43, 43, 43)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(insBut2))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(peekVal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addGap(21, 21, 21))))))
                .addContainerGap(47, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addGap(14, 14, 14)
                .addComponent(jLabel3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(pushVal, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pushBut))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(popVal, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(popBut)))
                .addGap(22, 22, 22)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(peekVal, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(insBut2)
                    .addComponent(jLabel5)
                    .addComponent(size)
                    .addComponent(jLabel6)
                    .addComponent(limitVal))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addContainerGap(30, Short.MAX_VALUE))
        );
        limitVal.setText(String.valueOf(limiter2));
        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void popValActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popValActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_popValActionPerformed

    private void pushButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pushButActionPerformed
        // TODO add your handling code here:
        if (limitOrNo2.withLimit2) {
            if (pushCount != 1) {
                pushCount++;
                limiterList = Integer.parseInt(limiter2);
                check();
                if (isNull) {
                    sizeAdd2 = 0;
                    listCount = 0;
                    size.setText(String.valueOf(sizeAdd2));
                } else {
                    listCount = crtArrayLst.numbersList.size();
                    sizeAdd2 = crtArrayLst.numbersList.size();
                    size.setText(String.valueOf(sizeAdd2));
                }
                pushMethodLimit();
            } else {
                pushMethodLimit();
            }
        } else {
            if (pushCount != 1) {
                pushCount++;
                
                insertArray.newNums = new ArrayList<>();
//                crtArrayLst.numbersList = new ArrayList<>();
//                for (int i = 0; i < crtArrayLst.numesLen; i++) {
//                    insertArray.newNums.add(crtArrayLst.numbersList.get(i));
//                }
                check();
                if (isNull) {
                    listCount = 0;
                    sizeAdd2 = 0;
                    size.setText(String.valueOf(sizeAdd2));
                } else {
                    listCount = crtArrayLst.numbersList.size();
                    sizeAdd2 = crtArrayLst.numbersList.size();
                    size.setText(String.valueOf(sizeAdd2));
                }
                pushMethodLimit();
            } else {
//                insertArray.newNums = new ArrayList<>(crtArrayLst.numesLen + 1);
//                for (int i = 0; i < crtArrayLst.numesLen; i++) {
//                    insertArray.newNums.add(crtArrayLst.numbersList.get(i));
//                }

                pushMethodLimit();
            }
        }

    }//GEN-LAST:event_pushButActionPerformed

    private void peekValActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_peekValActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_peekValActionPerformed

    private void insBut2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insBut2ActionPerformed
        // TODO add your handling code here:
        System.out.println(isNull);

        peekMethod();
    }//GEN-LAST:event_insBut2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        AbsDaTps2 backToMn = new AbsDaTps2();
        backToMn.setVisible(true);
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        // newNums = new int[createArray.numesLen];
        // System.arraycopy(createArray.numbers, 0, newNums, 0, createArray.numesLen);

        displayMethod();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void popButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popButActionPerformed
       popMethod();

    }//GEN-LAST:event_popButActionPerformed

    private void pushValActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pushValActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pushValActionPerformed
    
    private void check() {
        isNull = crtArrayLst.numbersList == null || crtArrayLst.numbersList.isEmpty();
    }

    private ArrayList<Integer> pushMethodLimit() {
//        System.out.println(crtArrayLst.numesLen);
        try {
//            System.out.println("current index push " + index);

            if (isNull && limitOrNo2.withLimit2) {
                System.out.println("isNull true & withLimit true");
                System.out.println(limiterList);
                if (listCount < limiterList) {
                    int valToPsh = Integer.parseInt(pushVal.getText());
                    newNums.add(valToPsh);
                    crtArrayLst.numbersList.add(valToPsh);
                    sizeAdd2++;
                    listCount++;
                    isNull = true;
                    JOptionPane.showMessageDialog(this, valToPsh + " is pushed to the stack!");
                    size.setText(String.valueOf(sizeAdd2));
                } else {
                    JOptionPane.showMessageDialog(this, " Stack is full!");
                }
            } else if (isNull && !limitOrNo2.withLimit2) {
                System.out.println("isNull true & withLimit false");
                int valToPsh = Integer.parseInt(pushVal.getText());
                newNums.add(valToPsh);
                crtArrayLst.numbersList.add(valToPsh);
                sizeAdd2++;
                JOptionPane.showMessageDialog(this, valToPsh + " is pushed to the stack!");
                size.setText(String.valueOf(sizeAdd2));
            } else if (!isNull && limitOrNo2.withLimit2){
                System.out.println("isNull FALSE");
                if (listCount != limiterList) {
                    int valToPsh = Integer.parseInt(pushVal.getText());
                    newNums.add(valToPsh);
                    crtArrayLst.numbersList.add(valToPsh);
                    listCount++;
                    sizeAdd2++;
                    JOptionPane.showMessageDialog(this, valToPsh + " is pushed to the stack!");
                    size.setText(String.valueOf(sizeAdd2));
                } else {
                    JOptionPane.showMessageDialog(this, " Stack is full!");
                }
            } else if (!isNull && !limitOrNo2.withLimit2) {
                System.out.println("isNull true & withLimit false");
                int valToPsh = Integer.parseInt(pushVal.getText());
                newNums.add(valToPsh);
                crtArrayLst.numbersList.add(valToPsh);
                notNullNoLimit++;
                sizeAdd2++;
                JOptionPane.showMessageDialog(this, valToPsh + " is pushed to the stack!");
                size.setText(String.valueOf(sizeAdd2));
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Enter a number!");
        }

//        for (int num : crtArrayLst.numbersList) {
//            System.out.print(num);
//        }
//        System.out.println("current peek null " + peekNull);

        return crtArrayLst.numbersList;
    }
    
    private void displayMethod() {
        if (crtArrayLst.numbersList.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Stack is empty!");
            displayArea.setText("");
        } else {
//            newNums = createArray.numbers;
            StringBuilder sb = new StringBuilder();
            sb.append("[ ");
            for (int num : crtArrayLst.numbersList) {
                if (num != 0) {
                    sb.append(num).append(" "); // Append non-zero values
                }
            }
            sb.append(" ]");
            displayArea.setText(sb.toString());
        }
    }

    private void peekMethod() {
        if (crtArrayLst.numbersList.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Stack is empty!");
            peekVal.setText("");
        } else {
            int topElement = crtArrayLst.numbersList.get(crtArrayLst.numbersList.size() - 1);
            peekVal.setText(String.valueOf(topElement));
            JOptionPane.showMessageDialog(this, topElement + " is at the top of the stack!");
        }
    }
    
    private ArrayList<Integer> popMethod() {
        if (crtArrayLst.numbersList.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Stack is empty!");
            popVal.setText("");
        } else {
            if (!isNull && limitOrNo2.withLimit2) {
                int poppedElement = crtArrayLst.numbersList.get(crtArrayLst.numbersList.size() - 1);
                crtArrayLst.numbersList.remove(crtArrayLst.numbersList.size() - 1);
                sizeAdd2--;
                listCount--;
                popVal.setText(String.valueOf(poppedElement));
                JOptionPane.showMessageDialog(this, poppedElement + " is popped from the stack!");
                size.setText(String.valueOf(sizeAdd2));
            } else if (isNull && !limitOrNo2.withLimit2) {
                int poppedElement = crtArrayLst.numbersList.get(crtArrayLst.numbersList.size() - 1);
                crtArrayLst.numbersList.remove(crtArrayLst.numbersList.size() - 1);
                sizeAdd2--;
                listCount--;
                popVal.setText(String.valueOf(poppedElement));
                JOptionPane.showMessageDialog(this, poppedElement + " is popped from the stack!");
                size.setText(String.valueOf(sizeAdd2));
            } else if (!isNull && !limitOrNo2.withLimit2) {
                int poppedElement = crtArrayLst.numbersList.get(notNullNoLimit);
                crtArrayLst.numbersList.remove(notNullNoLimit);
                notNullNoLimit--;
                sizeAdd2--;
                listCount--;
                popVal.setText(String.valueOf(poppedElement));
                JOptionPane.showMessageDialog(this, poppedElement + " is popped from the stack!");
                size.setText(String.valueOf(sizeAdd2));
            }
            
        }
        return crtArrayLst.numbersList;
    }


    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(stackFrame2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(stackFrame2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(stackFrame2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(stackFrame2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new stackFrame2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea displayArea;
    private javax.swing.JButton insBut2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel limitVal;
    private javax.swing.JTextField peekVal;
    private javax.swing.JButton popBut;
    private javax.swing.JTextField popVal;
    private javax.swing.JButton pushBut;
    private javax.swing.JTextField pushVal;
    private javax.swing.JLabel size;
    // End of variables declaration//GEN-END:variables
    private int pushCount =0;
    private int sizeAdd2 = 0;
    private boolean isNull;
    public static int listCount;
    public static int limiterList;
    public static String limiter2;
    private int notNullNoLimit = crtArrayLst.numbersList.size() -1;
}
